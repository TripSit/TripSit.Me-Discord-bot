###################
# BUILD FOR LOCAL DEVELOPMENT
###################
# In this step we copy over everything we need and install all dependancies
# We stop at the end of this step in development, so it also includes the deploy command

FROM node:22 AS development

ENV NODE_ENV=development

# Update the package list and install the necessary dependencies
RUN apt-get update && apt-get upgrade -y

# Create app directory
WORKDIR /workspaces/tripbot

# Change ownership of the workspaces directory to the node user
RUN chown -R node:node /workspaces/

# Do all of the above first so that the layers can run faster next time
USER node

# Copy application dependency manifests to the container image.
# A wildcard is used to ensure copying both package.json AND package-lock.json (when available).
# Copying this first prevents re-running npm install on every code change.
COPY --chown=node:node package*.json ./

# Install app dependencies using the `npm ci` command instead of `npm install`
# Use NPM CI even though this may be your first time, cuz package-lock already thinks you installed stuff
RUN npm install --silent

# Move the node_modules directory to the /workspaces directory
RUN mv node_modules ../

# Bundle app source
COPY --chown=node:node . .
COPY --chown=node:node ./assets ./build/assets

# For container development, the following command runs forever, so we can inspect the container
CMD ["tail", "-f", "/dev/null"]

###################
# BUILD FOR PRODUCTION
###################
# This stage prepares for and builds the production .js code
# We copy over the node_modules directory from the development image to ensure that the production image has access to all the dependencies it needs
# Then we copy over everything else that may be needed to run
# We run the build command which creates the production bundle
# We run npm ci --only=production to ensure that only the production dependencies are installed

FROM node:22 AS build

ENV NODE_ENV=production

WORKDIR /workspaces/tripbot

# Copy over the existing source code
COPY --chown=node:node --from=development . .

# Build the code
RUN tsc

# Running `npm ci` removes the existing node_modules directory and passing in --only=production ensures that only the production dependencies are installed. This ensures that the node_modules directory is as optimized as possible
RUN npm ci --omit:dev && npm cache clean --force

# At this point we have a build folder and a production node_modules folder

###################
# PRODUCTION
###################
# This stage creates the final, small-as-can-be, production image
# We copy over the node_modules directory from the build stage
# Then we ONLY copy over the /build folder with the js files

# Use the alpine image for the smallest possible image
FROM node:22-alpine AS production

ENV NODE_ENV=production

WORKDIR /workspaces/tripbot

# # Copy the bundled code from the build stage to the production image
COPY --chown=node:node --from=build /workspaces/tripbot/node_modules ./node_modules
COPY --chown=node:node --from=build /workspaces/tripbot/build ./build
  # This needs to be in the SRC folder because that's what package.json says
COPY --chown=node:node ./src/prisma/ ./src/prisma
COPY --chown=node:node ./assets ./build/assets
COPY --chown=node:node package*.json ./

USER node